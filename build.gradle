plugins {
    id "edu.wpi.first.GradleRIO" version "2019.1.1-beta-1" apply false
}

allprojects {
    apply plugin: 'cpp'
    apply plugin: 'google-test-test-suite'
    apply plugin: 'edu.wpi.first.GradleRIO'
    apply plugin: 'edu.wpi.first.GradleVsCode'

    model {
        libraries {
            all {
                if (name == 'opencv_native' && org.gradle.internal.os.OperatingSystem.current().isLinux()) {
                    // Use system opencv (for gtk)
                    it.sharedMatchers = ['**/*opencv*.so.*', '**/*opencv*.so']
                    it.maven = null
                    it.file = project.file("/usr/local/lib")
                }
            }
        }
        binaries {
            all {
                // Build debug only
                if (buildType.name == 'release')
                    buildable = false;
            }
        }
    }
}

deploy {
    targets {
        roboRIO("roborio") {
            team = getTeamNumber()
        }
    }
    artifacts {
        frcNativeArtifact('frcCpp') {
            targets << "roborio"
            component = 'frcUserProgram'
            debug = getDebugOrDefault(false)
        }
    }
}

model {
    toolChains {
        clang(Clang)
        gcc(Gcc)
        msvc(VisualCpp)
        roborio(edu.wpi.first.gradlerio.wpi.toolchain.WPIRoboRioGcc)
    }
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform 'desktop'
            targetPlatform 'roborio'

            sources.cpp {

                source {
                    srcDir 'src/main/cpp'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            binaries.all {
                if (targetPlatform == platforms.desktop) {
                    cppCompiler.define 'SIMULATION'
                    lib project: ':simulation', library: 'preseasonSimulation', linkage: 'shared'
                }
                lib project: ':common', library: 'preseasonCommon', linkage: 'shared'
                lib project: ':lua', library: 'minilua', linkage: 'shared'
                lib project: ':lua', library: 'lua', linkage: 'shared'
            }

            useLibrary(it, "wpilib")
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            binaries.all {
                // CHANGE ME:
                // cppCompiler.define 'SESSION_2_ACT_3'

                lib project: ':common', library: 'preseasonCommon', linkage: 'shared'
            }

            useLibrary(it, "wpilib", "googletest", "googletest_binaries")
        }
    }
}

task sim();
sim.dependsOn 'simulateFrcUserProgramDesktopDebugExecutable'

wpi.maven {
    useMirror("AU")
}

wrapper {
    gradleVersion = '4.9'
}
